name: Services

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - src/Services/**
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - src/Services/**

defaults:
  run:
    working-directory: src

jobs:

  # Builds the code 
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    # Checks out the code
    - name: Checkout
      uses: actions/checkout@v2

    # Sets up the .NET SDK
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: '5.0.x'
    
    # Installs the dependencies
    - name: Install dependencies
      run: dotnet restore

    # Builds the code
    - name: Build
      run: dotnet build --no-restore --configuration "Services Build"
  
  # Runs the tests with sonarscan
  test:
    needs: build
    name: Test
    runs-on: ubuntu-latest
    steps:
    # Checks out the code
    - name: Checkout
      uses: actions/checkout@v2
    
    # Tests the code and performs a sonarscan
    - name: Test
      uses: highbyte/sonarscan-dotnet@v2.1.1-beta
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        sonarProjectKey: metalglove_Kwetter
        sonarProjectName: Kwetter
        sonarOrganization: metalglove-github
        dotnetBuildArguments: ./src/Kwetter.sln --configuration "Services Build"
        dotnetTestArguments: ./src/Kwetter.sln --configuration "Services Build" --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"

  # Builds and publishes the docker images
  docker:
    needs: test
    name: Build and push Docker images
    environment:
      name: docker
    runs-on: ubuntu-latest
    steps:
    # Checks out the code
    - name: Checkout
      uses: actions/checkout@v2
    
    # Adds the Neuralm certificate for the registry
    - name: Add Neuralm certificate
      run: |
        echo "Create root certificate directory"
        sudo mkdir -p /usr/local/share/ca-certificates/${{ secrets.NEURALM_REGISTRY }}/
        echo "Create certificate"
        sudo printf "${{ secrets.NEURALM_CERTIFICATE }}" >> neuralm.crt
        echo "Create docker directory"
        sudo mkdir -p /etc/docker/
        echo "Create docker daemon json"
        sudo touch /etc/docker/daemon.json
        echo "Copy certificate to the ca-certificates directory"
        sudo cp neuralm.crt /usr/local/share/ca-certificates/${{ secrets.NEURALM_REGISTRY }}/ca.crt
        echo "Create neuralm certificate directory in docker"
        sudo mkdir -p /etc/docker/certs.d/${{ secrets.NEURALM_REGISTRY }}/
        echo "Copy certificate to the docker directory"
        sudo cp neuralm.crt /etc/docker/certs.d/${{ secrets.NEURALM_REGISTRY }}/ca.crt
        echo "Update CA certificates"
        sudo update-ca-certificates
        echo "Restart docker"
        sudo systemctl daemon-reload
        sudo systemctl restart docker

    # Prepares the docker build
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    # Caches the docker layers
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    # Logs in to the neuralm registry
    - name: Login to Neuralm Docker registry
      uses: docker/login-action@v1 
      with:
        registry: ${{ secrets.NEURALM_REGISTRY }}
        username: ${{ secrets.NEURALM_DOCKER_USERNAME }}
        password: ${{ secrets.NEURALM_DOCKER_PASSWORD }}
    
    # Builds and publishes the UserService
    - name: Build and push UserService Docker image 
      run: |
        echo "Building UserService docker image"
        docker build -t ${{ secrets.NEURALM_REGISTRY }}/kwetter-user-service:latest -f ./kwetter-user-service.Dockerfile .
        echo "Publishing UserService docker image"
        docker push ${{ secrets.NEURALM_REGISTRY }}/kwetter-user-service:latest

    # Builds and publishes the KweetService
    - name: Build and push KweetService Docker image 
      run: |
        echo "Building KweetService docker image"
        docker build -t ${{ secrets.NEURALM_REGISTRY }}/kwetter-kweet-service:latest -f ./kwetter-kweet-service.Dockerfile .
        echo "Publishing KweetService docker image"
        docker push ${{ secrets.NEURALM_REGISTRY }}/kwetter-kweet-service:latest
    
    # Builds and publishes the FollowService
    - name: Build and push FollowService Docker image 
      run: |
        echo "Building FollowService docker image"
        docker build -t ${{ secrets.NEURALM_REGISTRY }}/kwetter-follow-service:latest -f ./kwetter-follow-service.Dockerfile .
        echo "Publishing FollowService docker image"
        docker push ${{ secrets.NEURALM_REGISTRY }}/kwetter-follow-service:latest

  # Deploy to production
  production:
    needs: docker
    name: Deploy to Kubernetes
    environment:
      name: production
    runs-on: ubuntu-latest
    steps:
      - name: Set kubernetes context
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
          context: kwetter
      - name: Deploy services
        uses: jtalk/k8s-deploy@v2
        with:
          namespace: kwetter
          manifests: |
            ./K8s/services/follow-service/kwetter-follow-service.deployment.yaml
            ./K8s/services/user-service/kwetter-user-service.deployment.yaml
            ./K8s/services/kweet-service/kwetter-kweet-service.deployment.yaml
      